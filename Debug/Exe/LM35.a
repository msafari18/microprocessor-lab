;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 7/8/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16A
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdio.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <eeprom.h>
;
;//#include <avr/io.h>
;//#include <avr/eeprom.h>
;
;// Declare your global variables here
;int max = 0, min = 0 , s = 0 , n = 0 , flag = 0 , flag2 = 0 , temprature , mp ;
;char m1[20] , m2[20] , m3[20] ;
;int maxfromEE = 0 , minfromEE = 0;
;
;//eeprom int alfa = 1;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 002C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002D // Place your code here
; 0000 002E 
; 0000 002F       s = 100 ;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0030       delay_ms(10);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0031    //  PORTC.4 = 1 ;
; 0000 0032   //   PORTC.5 = 1 ;
; 0000 0033     //  PORTC.6 = 1 ;
; 0000 0034    //  PORTC.7 = 1 ;
; 0000 0035 
; 0000 0036       // Place your code here
; 0000 0037      // PORTC.4 = 0 ;
; 0000 0038 
; 0000 0039       if (PINC.0 == 0) {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003A 
; 0000 003B         PORTC = 0b00011111 ;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003C         if ( PINC == 0b00011111 ) {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003D         n = 1 ;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003E         if (flag == 0 )
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003F             max = max * 10 + 1 ;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0040         else
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0041             min = min * 10 + 1 ;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0042         }
;PCODE: $0000002C VOL: 0
; 0000 0043         PORTC = 0b00001111 ;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0044         PORTC = 0b00101111 ;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0045         if ( PINC == 0b00101111 ) {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0046         n = 6 ;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0047         if (flag == 0 )
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0048             max = max * 10 + 6 ;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0049         else
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004A             min = min * 10 + 6 ;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004B 
; 0000 004C         }
;PCODE: $00000045 VOL: 0
; 0000 004D         PORTC = 0b00001111 ;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004E         PORTC = 0b01001111 ;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004F         if ( PINC == 0b01001111 ) {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0050         n = 7 ;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0051          if (flag == 0 )
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0052             max = max * 10 + 7 ;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0053         else
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0054             min = min * 10 + 7 ;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0055 
; 0000 0056         }
;PCODE: $0000005E VOL: 0
; 0000 0057 
; 0000 0058         PORTC = 0b00001111 ;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0059         PORTC = 0b10001111 ;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005A         if ( PINC == 0b10001111 ) {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 005B         flag = 1   ;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 005C 
; 0000 005D         //max = max * 10 + 7 ;
; 0000 005E         //min = min * 10 + 7 ;
; 0000 005F 
; 0000 0060         }
; 0000 0061 
; 0000 0062         PORTC = 0b00001111 ;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0063         }
; 0000 0064 
; 0000 0065         if (PINC.1 == 0) {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0066 
; 0000 0067         PORTC = 0b00011111 ;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0068         if ( PINC == 0b00011111 ) {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0069         n = 2 ;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 006A          if (flag == 0 )
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 006B             max = max * 10 + 2 ;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 006C         else
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 006D             min = min * 10 + 2 ;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006E         }
;PCODE: $00000085 VOL: 0
; 0000 006F         PORTC = 0b00001111 ;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0070         PORTC = 0b00101111 ;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0071         if ( PINC == 0b00101111 ) {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0072         n = 5 ;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0073          if (flag == 0 )
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0074             max = max * 10 + 5 ;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0075         else
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0076             min = min * 10 + 5 ;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0077         }
;PCODE: $0000009E VOL: 0
; 0000 0078         PORTC = 0b00001111 ;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0079         PORTC = 0b01001111 ;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 007A         if ( PINC == 0b01001111 ) {
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 007B         n = 8 ;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 007C        if (flag == 0 )
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 007D             max = max * 10 + 8 ;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 007E         else
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 007F             min = min * 10 + 8 ;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0080 
; 0000 0081         }
;PCODE: $000000B7 VOL: 0
; 0000 0082 
; 0000 0083         PORTC = 0b00001111 ;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0084         }
; 0000 0085 
; 0000 0086         if (PINC.2 == 0) {
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0087 
; 0000 0088         PORTC = 0b00011111 ;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0089         if ( PINC == 0b00011111 ) {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 008A         n = 3 ;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 008B          if (flag == 0 )
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 008C             max = max * 10 + 3 ;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 008D         else
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 008E             min = min * 10 + 3 ;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 008F 
; 0000 0090         }
;PCODE: $000000D4 VOL: 0
; 0000 0091         PORTC = 0b00001111 ;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0092         PORTC = 0b00101111 ;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0093         if ( PINC == 0b00101111 ) {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0094         n = 4 ;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0095          if (flag == 0 )
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0096             max = max * 10 + 4 ;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0097         else
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0098             min = min * 10 + 4 ;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0099 
; 0000 009A         }
;PCODE: $000000ED VOL: 0
; 0000 009B         PORTC = 0b00001111 ;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 009C         PORTC = 0b01001111 ;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 009D         if ( PINC == 0b01001111 ) {
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 009E         n = 9 ;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 009F         if (flag == 0 )
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00A0             max = max * 10 + 9 ;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00A1         else
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00A2             min = min * 10 + 9 ;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00A3 
; 0000 00A4         }
;PCODE: $00000106 VOL: 0
; 0000 00A5 
; 0000 00A6         PORTC = 0b00001111 ;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00A7         PORTC = 0b10001111 ;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00A8         if ( PINC == 0b10001111 ) {
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00A9         flag2 = 1   ;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00AA         }
; 0000 00AB 
; 0000 00AC         PORTC = 0b00001111 ;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00AD         }
; 0000 00AE }
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 00B6 {
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00B7 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000011A VOL: 0
;	adc_input -> Y+0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00B8 // Delay needed for the stabilization of the ADC input voltage
; 0000 00B9 delay_us(10);
;PCODE: $0000011E VOL: 0
; 0000 00BA // Start the AD conversion
; 0000 00BB ADCSRA|=(1<<ADSC);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00BC // Wait for the AD conversion to complete
; 0000 00BD while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00BE ADCSRA|=(1<<ADIF);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00BF return ADCW;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00C0 }
;PCODE: $0000012C VOL: 0
;
;
;
;void main(void)
; 0000 00C5 {
;PCODE: $0000012D VOL: 0
; 0000 00C6 // Declare your local variables here
; 0000 00C7 
; 0000 00C8 // Input/Output Ports initialization
; 0000 00C9 // Port A initialization
; 0000 00CA // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 00CB DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00CC // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 00CD PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00CE 
; 0000 00CF // Port B initialization
; 0000 00D0 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00D1 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00D2 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00D3 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00D4 
; 0000 00D5 // Port C initialization
; 0000 00D6 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00D7 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00D8 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 00D9 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00DA 
; 0000 00DB // Port D initialization
; 0000 00DC // Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00DD DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00DE // State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00DF PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00E0 
; 0000 00E1 // Timer/Counter 0 initialization
; 0000 00E2 // Clock source: System Clock
; 0000 00E3 // Clock value: Timer 0 Stopped
; 0000 00E4 // Mode: Normal top=0xFF
; 0000 00E5 // OC0 output: Disconnected
; 0000 00E6 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00E7 TCNT0=0x00;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00E8 OCR0=0x00;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00E9 
; 0000 00EA // Timer/Counter 1 initialization
; 0000 00EB // Clock source: System Clock
; 0000 00EC // Clock value: Timer1 Stopped
; 0000 00ED // Mode: Normal top=0xFFFF
; 0000 00EE // OC1A output: Disconnected
; 0000 00EF // OC1B output: Disconnected
; 0000 00F0 // Noise Canceler: Off
; 0000 00F1 // Input Capture on Falling Edge
; 0000 00F2 // Timer1 Overflow Interrupt: Off
; 0000 00F3 // Input Capture Interrupt: Off
; 0000 00F4 // Compare A Match Interrupt: Off
; 0000 00F5 // Compare B Match Interrupt: Off
; 0000 00F6 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00F7 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00F8 TCNT1H=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00F9 TCNT1L=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00FA ICR1H=0x00;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00FB ICR1L=0x00;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00FC OCR1AH=0x00;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00FD OCR1AL=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00FE OCR1BH=0x00;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00FF OCR1BL=0x00;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0100 
; 0000 0101 // Timer/Counter 2 initialization
; 0000 0102 // Clock source: System Clock
; 0000 0103 // Clock value: Timer2 Stopped
; 0000 0104 // Mode: Normal top=0xFF
; 0000 0105 // OC2 output: Disconnected
; 0000 0106 ASSR=0<<AS2;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0107 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0108 TCNT2=0x00;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0109 OCR2=0x00;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 010A 
; 0000 010B // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 010C TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 010D 
; 0000 010E // External Interrupt(s) initialization
; 0000 010F // INT0: On
; 0000 0110 // INT0 Mode: Falling Edge
; 0000 0111 // INT1: Off
; 0000 0112 // INT2: Off
; 0000 0113 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0114 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0115 MCUCSR=(0<<ISC2);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0116 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0117 
; 0000 0118 // USART initialization
; 0000 0119 // USART disabled
; 0000 011A UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 011B 
; 0000 011C // Analog Comparator initialization
; 0000 011D // Analog Comparator: Off
; 0000 011E // The Analog Comparator's positive input is
; 0000 011F // connected to the AIN0 pin
; 0000 0120 // The Analog Comparator's negative input is
; 0000 0121 // connected to the AIN1 pin
; 0000 0122 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0123 
; 0000 0124 // ADC initialization
; 0000 0125 // ADC Clock frequency: 15.625 kHz
; 0000 0126 // ADC Voltage Reference: AVCC pin
; 0000 0127 // ADC Auto Trigger Source: Free Running
; 0000 0128 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0129 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 012A SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 012B 
; 0000 012C // SPI initialization
; 0000 012D // SPI disabled
; 0000 012E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 012F 
; 0000 0130 // TWI initialization
; 0000 0131 // TWI disabled
; 0000 0132 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0133 
; 0000 0134 // Alphanumeric LCD initialization
; 0000 0135 // Connections are specified in the
; 0000 0136 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0137 // RS - PORTB Bit 1
; 0000 0138 // RD - PORTB Bit 2
; 0000 0139 // EN - PORTB Bit 3
; 0000 013A // D4 - PORTB Bit 4
; 0000 013B // D5 - PORTB Bit 5
; 0000 013C // D6 - PORTB Bit 6
; 0000 013D // D7 - PORTB Bit 7
; 0000 013E // Characters/line: 8
; 0000 013F lcd_init(8);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0140 
; 0000 0141 // Global enable interrupts
; 0000 0142 #asm("sei")
;PCODE: $0000017B VOL: 0
	sei
;PCODE: $0000017C VOL: 0
; 0000 0143 
; 0000 0144 while (1)
;PCODE: $0000017D VOL: 0
; 0000 0145       {
; 0000 0146       // Place your code here
; 0000 0147 
; 0000 0148       mp = read_adc(0);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0149 
; 0000 014A       if (flag == 1)
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 014B         eeprom_update_dword(2,max);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 014C       if (flag2 == 1)
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 014D         eeprom_update_dword(6,min);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 014E 
; 0000 014F 
; 0000 0150       max = eeprom_read_dword(2) ;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0151       min = eeprom_read_dword(6) ;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0152 
; 0000 0153       sprintf(m1,"%d",max);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0154       sprintf(m2,"%d",min);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0155       lcd_gotoxy(0,0);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0156       lcd_puts(m1);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0157       lcd_gotoxy(0,1);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0158       lcd_puts(m2);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0159 
; 0000 015A       temprature = mp / 2 ;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 015B      // lcd_gotoxy(0,1);
; 0000 015C      // sprintf(m3,"%d",temprature)   ;
; 0000 015D      // lcd_puts(m3);
; 0000 015E 
; 0000 015F       // if (temprature > max && flag == 1) {
; 0000 0160 
; 0000 0161       if (temprature > max ) {
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0162         PORTD.6 = 1 ;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0163         PORTD.7 = 0;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0164       }
; 0000 0165 
; 0000 0166       if (temprature < min  ) {
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0167         PORTD.6 = 0 ;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0168         PORTD.7 = 1 ;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0169       }
; 0000 016A 
; 0000 016B       if( temprature > min && temprature < max) {
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 016C       PORTD.6 = 0 ;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 016D       PORTD.7 = 0;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 016E       }
; 0000 016F 
; 0000 0170 
; 0000 0171       //PORTD.6 = 0 ;
; 0000 0172       //PORTD.7 = 0;
; 0000 0173 
; 0000 0174       //sprintf(m1,"%d",max);
; 0000 0175       //sprintf(m2,"%d",min);
; 0000 0176       //lcd_gotoxy(0,0);
; 0000 0177       //lcd_puts(m1);
; 0000 0178       //lcd_gotoxy(0,1);
; 0000 0179       //lcd_puts(m2);
; 0000 017A 
; 0000 017B 
; 0000 017C       }
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 017D }
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
